////////////////////////////////////////////////////////////////////////////////
// "Heap"

_heap = 1024

def malloc(size) {
  size = (size + 3) & (0 - 4) // Round up to a multiple of 4
  ptr = _heap
  _heap = _heap + size
  return ptr
}

def memcpy(to, from, size) {
  i = 0
  while (i < size) {
    to[i] = from[i]
    i = i + 1
  }
}

////////////////////////////////////////////////////////////////////////////////
// Byte Array

_array_size = 0
_array_capacity = 1
_array_data = 2

def array_new(size) {
  if (size < 1) size = 1
  ptr = malloc(3 * 4)
  ptr._array_size = 0
  ptr._array_capacity = size
  ptr._array_data = malloc(size)
  return ptr
}

def array_get(array, i) {
  return ptr._array_data[i]
}

def array_set(array, i, value) {
  ptr._array_data[i] = value
}

def array_append(array, value) {
  size = array._array_size
  capacity = array._array_capacity

  // Grow the array if there's no more space
  if (size == capacity) {
    capacity = capacity * 2
    ptr = malloc(capacity)
    memcpy(ptr, array._array_data, size)
    array._array_data = ptr
    array._array_capacity = capacity
  }

  array._array_data[size] = value
  array._array_size = size + 1
}

////////////////////////////////////////////////////////////////////////////////
// Linked List

_list_first = 0
_list_last = 1

_link_value = 0
_link_next = 1

def list_new() {
  ptr = malloc(2 * 4)
  ptr._list_first = 0
  ptr._list_last = 0
  return ptr
}

def list_append(list, value) {
  ptr = malloc(2 * 4)
  ptr._link_value = value
  ptr._link_next = 0

  if (list._list_first == 0) {
    list._list_first = ptr
    list._list_last = ptr
  }

  else {
    list._list_last._link_next = ptr
    list._list_last = ptr
  }

  return ptr
}

////////////////////////////////////////////////////////////////////////////////

def main() {
  list = list_new()
  list_append(list, 'a')
  list_append(list, 'b')
  list_append(list, 'c')
  list_append(list, 0)

  array = array_new(2)
  link = list._list_first

  while (link != 0) {
    array_append(array, link._link_value)
    link = link._link_next
  }

  text = array._array_data
  print(text)
  return 0
}
